<application>
  <component name="VimEditorSettings">
    <editor />
  </component>
  <component name="VimHistorySettings">
    <history>
      <history-search />
      <history-cmd />
      <history-expr />
      <history-input />
    </history>
  </component>
  <component name="VimKeySettings">
    <shortcut-conflicts>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed S</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed J</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed X</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed OPEN_BRACKET</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed CLOSE_BRACKET</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed O</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed I</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed K</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed Q</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed 2</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed L</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed M</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed U</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>shift ctrl pressed 2</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
  <component name="VimMarksSettings">
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/git/rustlings/info.toml" timestamp="1587089328570">
        <mark key="'" line="142" column="0" />
        <mark key="[" line="2" column="0" />
        <mark key="]" line="2" column="0" />
        <mark key="^" line="143" column="3" />
        <mark key="." line="2" column="0" />
      </file>
      <file name="$USER_HOME$/git/rustlings/exercises/standard_library_types/iterators4.rs" timestamp="1587089430701">
        <mark key="[" line="13" column="53" />
        <mark key="]" line="14" column="4" />
        <mark key="^" line="14" column="4" />
        <mark key="." line="14" column="3" />
      </file>
    </filemarks>
    <jumps>
      <jump line="154" column="0" filename="$USER_HOME$/git/rustlings/info.toml" />
    </jumps>
  </component>
  <component name="VimRegisterSettings">
    <registers>
      <register name="1" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="&quot;" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="2" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">W1tleGVyY2lzZXNdXQpuYW1lID0gIml0ZXJhdG9yczMiCnBhdGggPSAiZXhlcmNpc2VzL3N0YW5kYXJkX2xpYnJhcnlfdHlwZXMvaXRlcmF0b3JzMy5ycyIKbW9kZSA9ICJ0ZXN0IgpoaW50ID0gIiIiCk1pbm9yIGhpbnQ6IEluIGVhY2ggb2YgdGhlIHR3byBjYXNlcyBpbiB0aGUgbWF0Y2ggaW4gbWFpbiwgeW91IGNhbiBjcmVhdGUgeCB3aXRoIGVpdGhlcgphICd0dXJib2Zpc2gnIG9yIGJ5IGhpbnRpbmcgdGhlIHR5cGUgb2YgeCB0byB0aGUgY29tcGlsZXIuIFlvdSBtYXkgdHJ5IGJvdGguCgpNYWpvciBoaW50OiBIYXZlIGEgbG9vayBhdCB0aGUgSXRlciB0cmFpdCBhbmQgYXQgdGhlIGV4cGxhbmF0aW9uIG9mIGl0cyBjb2xsZWN0IGZ1bmN0aW9uLgpFc3BlY2lhbGx5IHRoZSBwYXJ0IGFib3V0IFJlc3VsdCBpcyBpbnRlcmVzdGluZy4iIiIK</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">W1tleGVyY2lzZXNdXQpuYW1lID0gInZhcmlhYmxlczIiCnBhdGggPSAiZXhlcmNpc2VzL3ZhcmlhYmxlcy92YXJpYWJsZXMyLnJzIgptb2RlID0gImNvbXBpbGUiCmhpbnQgPSAiIiIKVGhlIGNvbXBpbGVyIG1lc3NhZ2UgaXMgc2F5aW5nIHRoYXQgUnVzdCBjYW5ub3QgaW5mZXIgdGhlIHR5cGUgdGhhdCB0aGUKdmFyaWFibGUgYmluZGluZyBgeGAgaGFzIHdpdGggd2hhdCBpcyBnaXZlbiBoZXJlLgpXaGF0IGhhcHBlbnMgaWYgeW91IGFubm90YXRlIGxpbmUgNyB3aXRoIGEgdHlwZSBhbm5vdGF0aW9uPwpXaGF0IGlmIHlvdSBnaXZlIHggYSB2YWx1ZT8KV2hhdCBpZiB5b3UgZG8gYm90aD8KV2hhdCB0eXBlIHNob3VsZCB4IGJlLCBhbnl3YXk/CldoYXQgaWYgeCBpcyB0aGUgc2FtZSB0eXBlIGFzIDEwPyBXaGF0IGlmIGl0J3MgYSBkaWZmZXJlbnQgdHlwZT8iIiIKCltbZXhlcmNpc2VzXV0KbmFtZSA9ICJ2YXJpYWJsZXMzIgpwYXRoID0gImV4ZXJjaXNlcy92YXJpYWJsZXMvdmFyaWFibGVzMy5ycyIKbW9kZSA9ICJjb21waWxlIgpoaW50ID0gIiIiCkluIFJ1c3QsIHZhcmlhYmxlIGJpbmRpbmdzIGFyZSBpbW11dGFibGUgYnkgZGVmYXVsdC4gQnV0IGhlcmUgd2UncmUgdHJ5aW5nCnRvIHJlYXNzaWduIGEgZGlmZmVyZW50IHZhbHVlIHRvIHghIFRoZXJlJ3MgYSBrZXl3b3JkIHdlIGNhbiB1c2UgdG8gbWFrZQphIHZhcmlhYmxlIGJpbmRpbmcgbXV0YWJsZSBpbnN0ZWFkLiIiIgoKW1tleGVyY2lzZXNdXQpuYW1lID0gInZhcmlhYmxlczQiCnBhdGggPSAiZXhlcmNpc2VzL3ZhcmlhYmxlcy92YXJpYWJsZXM0LnJzIgptb2RlID0gImNvbXBpbGUiCmhpbnQgPSAiIiIKT29wcyEgSW4gdGhpcyBleGVyY2lzZSwgd2UgaGF2ZSBhIHZhcmlhYmxlIGJpbmRpbmcgdGhhdCB3ZSd2ZSBjcmVhdGVkIG9uCmxpbmUgNywgYW5kIHdlJ3JlIHRyeWluZyB0byB1c2UgaXQgb24gbGluZSA4LCBidXQgd2UgaGF2ZW4ndCBnaXZlbiBpdCBhCnZhbHVlLiBXZSBjYW4ndCBwcmludCBvdXQgc29tZXRoaW5nIHRoYXQgaXNuJ3QgdGhlcmU7IHRyeSBnaXZpbmcgeCBhIHZhbHVlIQpUaGlzIGlzIGFuIGVycm9yIHRoYXQgY2FuIGNhdXNlIGJ1Z3MgdGhhdCdzIHZlcnkgZWFzeSB0byBtYWtlIGluIGFueQpwcm9ncmFtbWluZyBsYW5ndWFnZSAtLSB0aGFua2Z1bGx5IHRoZSBSdXN0IGNvbXBpbGVyIGhhcyBjYXVnaHQgdGhpcyBmb3IgdXMhIiIiCgpbW2V4ZXJjaXNlc11dCm5hbWUgPSAidmFyaWFibGVzNSIKcGF0aCA9ICJleGVyY2lzZXMvdmFyaWFibGVzL3ZhcmlhYmxlczUucnMiCm1vZGUgPSAiY29tcGlsZSIKaGludCA9ICIiIgpJbiB2YXJpYWJsZXMzIHdlIGFscmVhZHkgbGVhcm5lZCBob3cgdG8gbWFrZSBhbiBpbW11dGFibGUgdmFyaWFibGUgbXV0YWJsZQp1c2luZyBhIHNwZWNpYWwga2V5d29yZC4gVW5mb3J0dW5hdGVseSB0aGlzIGRvZXNuJ3QgaGVscCB1cyBtdWNoIGluIHRoaXMgZXhlcmNpc2UKYmVjYXVzZSB3ZSB3YW50IHRvIGFzc2lnbiBhIGRpZmZlcmVudCB0eXBlZCB2YWx1ZSB0byBhbiBleGlzdGluZyB2YXJpYWJsZS4gU29tZXRpbWVzCnlvdSBtYXkgYWxzbyBsaWtlIHRvIHJldXNlIGV4aXN0aW5nIHZhcmlhYmxlIG5hbWVzIGJlY2F1c2UgeW91IGFyZSBqdXN0IGNvbnZlcnRpbmcKdmFsdWVzIHRvIGRpZmZlcmVudCB0eXBlcyBsaWtlIGluIHRoaXMgZXhlcmNpc2UuCg==</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">W1tleGVyY2lzZXNdXQpuYW1lID0gInZhcmlhYmxlczEiCnBhdGggPSAiZXhlcmNpc2VzL3ZhcmlhYmxlcy92YXJpYWJsZXMxLnJzIgptb2RlID0gImNvbXBpbGUiCmhpbnQgPSAiIiIKSGludDogVGhlIGRlY2xhcmF0aW9uIG9uIGxpbmUgMTIgaXMgbWlzc2luZyBhIGtleXdvcmQgdGhhdCBpcyBuZWVkZWQgaW4gUnVzdAp0byBjcmVhdGUgYSBuZXcgdmFyaWFibGUgYmluZGluZy4iIiIK</text>
      </register>
    </registers>
  </component>
  <component name="VimSearchSettings">
    <search>
      <last-dir>0</last-dir>
      <show-last>false</show-last>
    </search>
  </component>
  <component name="VimSettings">
    <state version="6" enabled="true" />
    <notifications>
      <idea-join enabled="true" />
      <idea-put enabled="false" />
    </notifications>
  </component>
</application>